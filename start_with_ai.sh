#!/bin/bash

# Script de inicializa√ß√£o do FinanMaster com MCP
echo "üöÄ Iniciando FinanMaster - Sistema de Gest√£o Financeira com IA"

# Verificar vers√£o do Python
python_version=$(python3 --version 2>&1 | grep -oE '[0-9]+\.[0-9]+')
echo "üêç Python version: $python_version"

# Verificar se o ambiente virtual existe
if [ ! -d ".venv" ]; then
    echo "üì¶ Criando ambiente virtual..."
    python3 -m venv .venv
fi

# Ativar ambiente virtual
echo "üîß Ativando ambiente virtual..."
source .venv/bin/activate

# Atualizar pip
echo "‚¨ÜÔ∏è Atualizando pip..."
pip install --upgrade pip

# Instalar depend√™ncias
echo "üì• Instalando depend√™ncias..."
pip install -r requirements.txt

# Verificar instala√ß√£o das principais bibliotecas
echo "‚úÖ Verificando instala√ß√£o das bibliotecas..."
python -c "import flask; print(f'Flask: {flask.__version__}')"
python -c "import fastapi; print(f'FastAPI: {fastapi.__version__}')"
python -c "import pandas; print(f'Pandas: {pandas.__version__}')"
python -c "import numpy; print(f'NumPy: {numpy.__version__}')"

# Fun√ß√£o para checar se a porta est√° em uso
is_port_in_use() {
    local port=$1
    if command -v lsof >/dev/null 2>&1; then
        lsof -i :"$port" -sTCP:LISTEN -P -n >/dev/null 2>&1
        return $?
    else
        ss -ltn 2>/dev/null | grep -q ":$port "
        return $?
    fi
}

# Fun√ß√£o para parar todos os processos
cleanup() {
    echo "‚èπÔ∏è  Parando servidores..."
    if [ -n "$FLASK_PID" ] && kill -0 "$FLASK_PID" 2>/dev/null; then
        kill "$FLASK_PID"
    fi
    if [ -n "$MCP_PID" ] && kill -0 "$MCP_PID" 2>/dev/null; then
        kill "$MCP_PID"
    fi
    wait
    exit 0
}

# Capturar Ctrl+C
trap cleanup SIGINT

# Executar servidor Flask em background
if is_port_in_use 5001; then
    echo "‚ÑπÔ∏è  Porta 5001 j√° est√° em uso. Presumindo que o Flask j√° est√° rodando. Pulando start do Flask."
else
    echo "üåê Iniciando servidor Flask (porta 5001)..."
    python app.py &
    FLASK_PID=$!
fi

# Aguardar um pouco para o Flask inicializar
sleep 3

# Executar servidor MCP em background
if is_port_in_use 8000; then
    echo "‚ÑπÔ∏è  Porta 8000 j√° est√° em uso. Presumindo que o MCP j√° est√° rodando. Pulando start do MCP."
else
    echo "ü§ñ Iniciando servidor MCP (porta 8000)..."
    cd instance
    python mcp_server.py &
    MCP_PID=$!
    cd ..
fi

echo ""
echo "‚úÖ Servidores iniciados com sucesso!"
echo "üìç Aplica√ß√£o principal: http://localhost:5001"
echo "ü§ñ Servidor MCP: http://localhost:8000"
echo "üìä Documenta√ß√£o MCP: http://localhost:8000/docs"
echo ""
echo "‚èπÔ∏è  Para parar: Ctrl+C"
echo ""

# Manter script rodando
wait
